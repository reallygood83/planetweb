'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  OBSERVATION_CATEGORIES, 
  INTENSITY_MODIFIERS 
} from '@/lib/data/observation-keywords';
import { 
  SelectedKeyword, 
  StudentObservation 
} from '@/lib/types/observation-system';

interface KeywordCheckboxSystemProps {
  studentName: string;
  onObservationChange: (observation: StudentObservation) => void;
  initialData?: StudentObservation;
}

export default function KeywordCheckboxSystem({ 
  studentName, 
  onObservationChange, 
  initialData 
}: KeywordCheckboxSystemProps) {
  const [selectedKeywords, setSelectedKeywords] = useState<SelectedKeyword[]>(
    initialData?.selected_keywords || []
  );
  const [additionalNotes, setAdditionalNotes] = useState(
    initialData?.additional_notes || ''
  );
  const [overallRating, setOverallRating] = useState<1 | 2 | 3 | 4 | 5>(
    initialData?.overall_rating || 3
  );
  const [quickSearchTerm, setQuickSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [autoGeneratedText, setAutoGeneratedText] = useState('');

  // 필터링된 카테고리
  const filteredCategories = selectedCategory === 'all' 
    ? OBSERVATION_CATEGORIES 
    : OBSERVATION_CATEGORIES.filter(cat => cat.id === selectedCategory);

  // 키워드 검색 필터링
  const searchFilteredCategories = filteredCategories.map(category => ({
    ...category,
    keywords: category.keywords.filter(keyword =>
      keyword.text.toLowerCase().includes(quickSearchTerm.toLowerCase()) ||
      (keyword.description && keyword.description.toLowerCase().includes(quickSearchTerm.toLowerCase()))
    )
  })).filter(category => category.keywords.length > 0);

  // 키워드 선택/해제 처리
  const handleKeywordToggle = (categoryId: string, keywordId: string, checked: boolean) => {
    if (checked) {
      const newKeyword: SelectedKeyword = {
        keyword_id: keywordId,
        category_id: categoryId,
        intensity: 2, // 기본값: 보통
        timestamp: new Date().toISOString()
      };
      setSelectedKeywords(prev => [...prev, newKeyword]);
    } else {
      setSelectedKeywords(prev => 
        prev.filter(sk => !(sk.keyword_id === keywordId && sk.category_id === categoryId))
      );
    }
  };

  // 강도 조절
  const handleIntensityChange = (keywordId: string, categoryId: string, intensity: 1 | 2 | 3) => {
    setSelectedKeywords(prev =>
      prev.map(sk => 
        sk.keyword_id === keywordId && sk.category_id === categoryId
          ? { ...sk, intensity }
          : sk
      )
    );
  };

  // 맥락 추가
  const handleContextChange = (keywordId: string, categoryId: string, context: string) => {
    setSelectedKeywords(prev =>
      prev.map(sk => 
        sk.keyword_id === keywordId && sk.category_id === categoryId
          ? { ...sk, context }
          : sk
      )
    );
  };

  // 자동 텍스트 생성
  const generateAutoText = useCallback(() => {
    if (selectedKeywords.length === 0) {
      setAutoGeneratedText('');
      return;
    }

    const sentences: string[] = [];
    
    // 카테고리별로 그룹화
    const keywordsByCategory = selectedKeywords.reduce((acc, sk) => {
      if (!acc[sk.category_id]) acc[sk.category_id] = [];
      acc[sk.category_id].push(sk);
      return acc;
    }, {} as Record<string, SelectedKeyword[]>);

    // 각 카테고리별로 문장 생성
    Object.entries(keywordsByCategory).forEach(([categoryId, keywords]) => {
      const category = OBSERVATION_CATEGORIES.find(c => c.id === categoryId);
      if (!category) return;

      const keywordTexts = keywords.map(sk => {
        const keyword = category.keywords.find(k => k.id === sk.keyword_id);
        if (!keyword) return '';

        const modifier = INTENSITY_MODIFIERS[sk.intensity || 2];
        const baseText = keyword.autoText || keyword.text;
        
        return `${modifier.prefix} ${baseText}`.trim();
      }).filter(Boolean);

      if (keywordTexts.length > 0) {
        sentences.push(keywordTexts.join(', '));
      }
    });

    // 조합 패턴 확인 및 개선된 문장 생성
    const improvedSentences = sentences.map(sentence => {
      // 여기서 KEYWORD_COMBINATIONS를 활용한 더 자연스러운 문장 생성 로직
      return sentence;
    });

    setAutoGeneratedText(improvedSentences.join('. ') + '.');
  }, [selectedKeywords]);

  // 선택 변경시 자동 텍스트 업데이트
  useEffect(() => {
    generateAutoText();
  }, [selectedKeywords, generateAutoText]);

  // 부모 컴포넌트에 변경 사항 전달
  useEffect(() => {
    const observation: StudentObservation = {
      student_name: studentName,
      selected_keywords: selectedKeywords,
      additional_notes: additionalNotes,
      overall_rating: overallRating
    };
    onObservationChange(observation);
  }, [selectedKeywords, additionalNotes, overallRating, studentName, onObservationChange]);

  // 키워드 선택 여부 확인
  const isKeywordSelected = (categoryId: string, keywordId: string) => {
    return selectedKeywords.some(sk => 
      sk.keyword_id === keywordId && sk.category_id === categoryId
    );
  };

  // 선택된 키워드 정보 가져오기
  const getSelectedKeyword = (categoryId: string, keywordId: string) => {
    return selectedKeywords.find(sk => 
      sk.keyword_id === keywordId && sk.category_id === categoryId
    );
  };

  return (
    <div className="space-y-6 p-4 border rounded-lg bg-white">
      {/* 헤더 */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-gray-900">
          {studentName} 관찰 기록
        </h3>
        <div className="flex items-center space-x-2">
          <Label htmlFor="overall-rating" className="text-sm font-medium">
            전체 평가:
          </Label>
          <select
            id="overall-rating"
            value={overallRating}
            onChange={(e) => setOverallRating(Number(e.target.value) as 1 | 2 | 3 | 4 | 5)}
            className="px-2 py-1 border rounded text-sm"
          >
            <option value={1}>개선필요</option>
            <option value={2}>노력요함</option>
            <option value={3}>보통</option>
            <option value={4}>잘함</option>
            <option value={5}>매우우수</option>
          </select>
        </div>
      </div>

      {/* 빠른 검색 및 카테고리 필터 */}
      <div className="space-y-3">
        <div className="flex space-x-3">
          <div className="flex-1">
            <Input
              placeholder="키워드 검색..."
              value={quickSearchTerm}
              onChange={(e) => setQuickSearchTerm(e.target.value)}
              className="text-sm"
            />
          </div>
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="px-3 py-2 border rounded text-sm bg-white"
          >
            <option value="all">전체 영역</option>
            {OBSERVATION_CATEGORIES.map(category => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
        </div>

        {/* 선택된 키워드 요약 */}
        {selectedKeywords.length > 0 && (
          <div className="flex flex-wrap gap-2">
            {selectedKeywords.map((sk, index) => {
              const category = OBSERVATION_CATEGORIES.find(c => c.id === sk.category_id);
              const keyword = category?.keywords.find(k => k.id === sk.keyword_id);
              
              return (
                <Badge key={`${sk.category_id}-${sk.keyword_id}-${index}`} variant="secondary">
                  {keyword?.text} ({INTENSITY_MODIFIERS[sk.intensity || 2].prefix || '보통'})
                </Badge>
              );
            })}
          </div>
        )}
      </div>

      {/* 키워드 카테고리별 체크박스 */}
      <div className="space-y-6">
        {searchFilteredCategories.map(category => (
          <div key={category.id} className="space-y-3">
            <h4 className={`font-medium text-${category.color}-700 flex items-center space-x-2`}>
              <span className={`w-3 h-3 rounded-full bg-${category.color}-500`}></span>
              <span>{category.name}</span>
              <span className="text-xs text-gray-500">({category.description})</span>
            </h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {category.keywords.map(keyword => {
                const isSelected = isKeywordSelected(category.id, keyword.id);
                const selectedKeyword = getSelectedKeyword(category.id, keyword.id);
                
                return (
                  <div key={keyword.id} className="space-y-2 p-3 border rounded hover:bg-gray-50">
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        id={`${category.id}-${keyword.id}`}
                        checked={isSelected}
                        onCheckedChange={(checked) => 
                          handleKeywordToggle(category.id, keyword.id, checked as boolean)
                        }
                      />
                      <Label 
                        htmlFor={`${category.id}-${keyword.id}`}
                        className={`text-sm font-medium cursor-pointer ${
                          keyword.positivity === 'positive' ? 'text-green-700' :
                          keyword.positivity === 'improvement' ? 'text-orange-700' :
                          'text-gray-700'
                        }`}
                      >
                        {keyword.text}
                      </Label>
                    </div>
                    
                    {keyword.description && (
                      <p className="text-xs text-gray-500 ml-6">
                        {keyword.description}
                      </p>
                    )}
                    
                    {/* 선택된 키워드의 강도 조절 */}
                    {isSelected && (
                      <div className="ml-6 space-y-2">
                        <div className="flex space-x-2">
                          {[1, 2, 3].map(intensity => (
                            <button
                              key={intensity}
                              onClick={() => handleIntensityChange(keyword.id, category.id, intensity as 1 | 2 | 3)}
                              className={`px-2 py-1 text-xs rounded ${
                                selectedKeyword?.intensity === intensity
                                  ? 'bg-blue-500 text-white'
                                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                              }`}
                            >
                              {intensity === 1 ? '약간' : intensity === 2 ? '보통' : '매우'}
                            </button>
                          ))}
                        </div>
                        
                        <Input
                          placeholder="상황 맥락 (선택사항)"
                          value={selectedKeyword?.context || ''}
                          onChange={(e) => handleContextChange(keyword.id, category.id, e.target.value)}
                          className="text-xs"
                        />
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        ))}
      </div>

      {/* 자동 생성된 텍스트 미리보기 */}
      {autoGeneratedText && (
        <div className="space-y-2">
          <Label className="text-sm font-medium text-gray-700">
            자동 생성된 관찰 기록:
          </Label>
          <div className="p-3 bg-blue-50 border border-blue-200 rounded text-sm">
            {autoGeneratedText}
          </div>
        </div>
      )}

      {/* 추가 메모 */}
      <div className="space-y-2">
        <Label htmlFor="additional-notes" className="text-sm font-medium">
          추가 관찰 내용
        </Label>
        <Textarea
          id="additional-notes"
          placeholder="키워드로 표현하기 어려운 구체적인 관찰 내용을 입력하세요..."
          value={additionalNotes}
          onChange={(e) => setAdditionalNotes(e.target.value)}
          rows={3}
          className="text-sm"
        />
      </div>

      {/* 행동 버튼 */}
      <div className="flex justify-between">
        <Button 
          variant="outline" 
          size="sm"
          onClick={() => {
            setSelectedKeywords([]);
            setAdditionalNotes('');
            setOverallRating(3);
          }}
        >
          초기화
        </Button>
        
        <div className="flex space-x-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={generateAutoText}
          >
            텍스트 재생성
          </Button>
          <Button 
            size="sm"
            onClick={() => {
              // 저장 로직 (부모 컴포넌트에서 처리)
              console.log('관찰 기록 저장:', {
                student_name: studentName,
                selected_keywords: selectedKeywords,
                additional_notes: additionalNotes,
                overall_rating: overallRating,
                auto_generated_text: autoGeneratedText
              });
            }}
          >
            저장
          </Button>
        </div>
      </div>
    </div>
  );
}