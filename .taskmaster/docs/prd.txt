# 생기부 AI 도우미 고도화 프로젝트 - 교과학습발달상황 생성 개선

## 1. 프로젝트 개요

### 1.1 프로젝트 목표
기존 생기부 AI 도우미의 교과학습발달상황 생성 기능을 고도화하여, 평가계획과 학생 자기평가를 더욱 정교하게 반영하는 AI 프롬프트 시스템을 구축하고, 교사 관찰 기록 입력을 키워드 기반 체크박스 시스템으로 개선한다.

### 1.2 배경 및 필요성
- 현재 생기부 생성에서 평가계획과 학생 자기평가의 연동이 단순함
- 교사 관찰 기록이 텍스트 기반으로만 입력되어 일관성과 효율성 부족
- NEIS 규정을 준수하면서도 개인화된 생기부 생성 필요
- 500자 제한 내에서 더욱 구체적이고 의미 있는 내용 생성 필요

### 1.3 핵심 성과 지표 (KPI)
- 생기부 생성 품질 향상: 교사 만족도 90% 이상
- 입력 시간 단축: 기존 대비 50% 단축
- 생성 일관성 개선: 동일 조건 생성시 유사도 85% 이상
- 교사 관찰 기록 입력 효율성 3배 향상

## 2. 핵심 기능 요구사항

### 2.1 정교화된 프롬프트 시스템
**기능 설명**: 평가계획과 학생 자기평가를 체계적으로 분석하여 더 개인화된 생기부를 생성하는 AI 프롬프트 시스템

**세부 요구사항**:
- 평가계획의 성취기준별 가중치 적용
- 학생 자기평가 응답의 맥락적 해석
- 평가결과와 자기평가 간의 차이 분석 및 반영
- 교과별 특성을 고려한 차별화된 프롬프트
- 성취수준별 서술 패턴 최적화

### 2.2 키워드 기반 관찰 기록 시스템
**기능 설명**: 교사가 체크박스와 키워드 선택을 통해 빠르고 체계적으로 관찰 기록을 입력할 수 있는 시스템

**세부 요구사항**:
- 교과별 관찰 키워드 데이터베이스 구축
- 체크박스 기반 빠른 입력 인터페이스
- 키워드 조합을 통한 자동 문장 생성
- 일상 관찰 기록 누적 및 관리
- 모바일 최적화된 터치 인터페이스

### 2.3 통합 분석 대시보드
**기능 설명**: 평가계획-설문-응답-생기부 생성의 전체 흐름을 한눈에 볼 수 있는 통합 대시보드

**세부 요구사항**:
- 평가계획별 현황 모니터링
- 설문 응답률 및 분석 결과 시각화
- 생기부 생성 진행 상황 추적
- 학급 단위 통계 및 인사이트
- 이상치 및 개선 필요 항목 자동 감지

### 2.4 자동 매핑 및 검증 시스템
**기능 설명**: 학생 응답을 평가기준에 자동으로 매핑하고 생성된 생기부의 품질을 검증하는 시스템

**세부 요구사항**:
- 자기평가 응답의 4단계 평가기준 자동 매핑
- 생성된 생기부의 NEIS 규정 준수 자동 검증
- 내용 일관성 및 논리성 검증
- 개인정보 보호 규정 자동 점검
- 교정 제안 및 개선 사항 자동 생성

## 3. 기술 요구사항

### 3.1 AI 모델 최적화
- Google Gemini API 활용 최적화
- 프롬프트 엔지니어링 고도화
- 한국어 교육 도메인 특화 처리
- 응답 일관성 및 품질 보장

### 3.2 데이터베이스 확장
- 관찰 키워드 테이블 신규 구축
- 일상 관찰 기록 테이블 추가
- 응답 분석 결과 저장 구조 개선
- 성능 최적화 및 인덱싱

### 3.3 사용자 인터페이스 개선
- React Hook Form 기반 동적 폼 시스템
- Tailwind CSS를 활용한 반응형 디자인
- 키보드 단축키 및 접근성 향상
- 실시간 저장 및 복구 기능

### 3.4 성능 및 보안
- API 호출 최적화 및 캐싱
- 민감정보 암호화 강화
- 사용자 권한 관리 개선
- 에러 처리 및 복구 시스템

## 4. 사용자 시나리오

### 4.1 교사 - 평가계획 기반 생기부 생성
1. 교사가 평가계획을 생성하고 성취기준을 입력한다
2. 시스템이 평가계획을 분석하여 맞춤형 설문을 자동 생성한다
3. 학생들이 자기평가 설문에 응답한다
4. 교사가 키워드 기반으로 관찰 기록을 빠르게 입력한다
5. AI가 모든 데이터를 종합하여 개인화된 생기부를 생성한다
6. 교사가 생성 결과를 검토하고 필요시 수정한다

### 4.2 교사 - 일상 관찰 기록 관리
1. 교사가 수업 중 모바일로 학생 관찰 내용을 체크박스로 빠르게 기록한다
2. 시스템이 관찰 기록을 자동으로 분류하고 누적한다
3. 생기부 생성 시점에 누적된 관찰 기록이 자동으로 반영된다
4. 학생별 관찰 패턴과 성장 변화를 시각적으로 확인한다

### 4.3 시스템 관리자 - 품질 관리
1. 생성된 생기부의 품질 지표를 실시간으로 모니터링한다
2. 이상치나 품질 저하 요소를 자동으로 감지한다
3. 프롬프트 성능을 분석하고 개선 방향을 도출한다
4. 사용자 피드백을 수집하고 시스템을 지속적으로 개선한다

## 5. 성공 기준

### 5.1 품질 기준
- 생기부 내용의 교육적 가치 및 의미성
- NEIS 규정 100% 준수
- 개인화 수준 및 차별성
- 내용의 논리적 일관성

### 5.2 효율성 기준
- 교사 작업 시간 50% 단축
- 관찰 기록 입력 속도 3배 향상
- 시스템 응답 시간 3초 이내
- 오류 발생률 1% 미만

### 5.3 사용성 기준
- 사용자 인터페이스 직관성
- 학습 곡선 최소화
- 모바일 접근성 100%
- 사용자 만족도 90% 이상

## 6. 제약사항 및 고려사항

### 6.1 기술적 제약사항
- 기존 Next.js + Supabase 아키텍처 유지
- Google Gemini API 비용 및 rate limit
- NEIS 규정 및 개인정보보호법 준수
- 한국어 자연어처리 특성

### 6.2 사용자 제약사항
- 교사의 IT 활용 능력 편차
- 기존 업무 프로세스와의 호환성
- 학습 시간 및 적응 기간
- 모바일 환경에서의 사용성

### 6.3 운영 제약사항
- 24/7 서비스 안정성 요구
- 학기별 대용량 트래픽 대응
- 데이터 백업 및 복구 체계
- 지속적인 AI 모델 성능 개선

## 7. 위험 요소 및 대응 방안

### 7.1 기술적 위험
- **위험**: AI 모델 성능 저하 또는 불일치
- **대응**: A/B 테스트 및 점진적 배포, 폴백 시스템 구축

### 7.2 사용자 위험
- **위험**: 기존 사용자의 변화 저항
- **대응**: 단계적 도입 및 충분한 교육, 기존 기능 유지

### 7.3 데이터 위험
- **위험**: 개인정보 유출 또는 오남용
- **대응**: 강화된 보안 체계 및 접근 권한 관리

## 8. 일정 및 마일스톤

### Phase 1: 분석 및 설계 (2주)
- 현재 시스템 상세 분석
- 프롬프트 개선 방안 설계
- 키워드 데이터베이스 설계
- UI/UX 개선 방안 수립

### Phase 2: 핵심 기능 개발 (4주)
- 정교화된 프롬프트 시스템 구현
- 키워드 기반 입력 시스템 개발
- 자동 매핑 알고리즘 구현
- 통합 대시보드 개발

### Phase 3: 테스트 및 검증 (2주)
- 단위 테스트 및 통합 테스트
- 사용자 테스트 및 피드백 수집
- 성능 최적화 및 버그 수정
- 문서화 및 배포 준비

### Phase 4: 배포 및 모니터링 (1주)
- 프로덕션 배포
- 실시간 모니터링 시스템 구축
- 사용자 교육 및 지원
- 성과 측정 및 개선 계획 수립